#


import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr, spearmanr

#
plt.rcParams['font.family'] = "Times New Roman"
plt.rcParams.update({'font.size': 16})

# SYSTEM_NAMES = ["SelfAtt-Graph", "w/o fine-tuning", "w/ fine-tuning"]
SYSTEM_NAMES = ["Baseline", "Direct-Transfer", "Fine-Tuned"]
#
JA_DDIST_RECALL = [
    [0.043231441, 0.061111111, 0.090909091, 0.071875, 0.125757576, 0.110067114, 0.110344828, 0.131468531, 0.148511384, 0.196969697, 0.781484716, 0.307181425, 0.249070632, 0.24191344, 0.252040816, 0.285714286, 0.255813953, 0.3625, 0.411111111, 0.42, 0.375, 0.118826406],
    [0.133187773, 0.125, 0.181818182, 0.09375, 0.106060606, 0.093959732, 0.086206897, 0.118881119, 0.119089317, 0.123376623, 0.631441048, 0.120950324, 0.118959108, 0.200455581, 0.234693878, 0.230769231, 0.348837209, 0.3125, 0.388888889, 0.45, 0.5, 0.388753056],
    [0.11790393, 0.152777778, 0.151515152, 0.1484375, 0.257575758, 0.302013423, 0.24137931, 0.27039627, 0.166374781, 0.378787879, 0.283842795, 0.694114471, 0.403345725, 0.407744875, 0.408163265, 0.351648352, 0.372093023, 0.5625, 0.444444444, 0.45, 0.4375, 0.202933985],
]
JA_DDIST_PRECISION = [
    [0.079673903, 0.089873737, 0.115039224, 0.141027705, 0.184560658, 0.13602341, 0.156170184, 0.166435245, 0.148837074, 0.271889679, 0.306346153, 0.772867494, 0.204131412, 0.162000706, 0.095803367, 0.080958092, 0.053134421, 0.03750537, 0.052183928, 0.102404207, 0.087829088, 0.131659571],
    [0.077905492, 0.08411215, 0.103448276, 0.103448276, 0.08974359, 0.081395349, 0.08583691, 0.143258427, 0.134387352, 0.219230769, 0.225233645, 0.635460993, 0.094048494, 0.138801262, 0.125, 0.091703057, 0.090361446, 0.042016807, 0.061403509, 0.118421053, 0.133333333, 0.251980983],
    [0.096256684, 0.097345133, 0.097087379, 0.120253165, 0.184782609, 0.183673469, 0.227642276, 0.289276808, 0.250659631, 0.662251656, 0.236880466, 0.736043516, 0.574074074, 0.374476987, 0.266666667, 0.137931034, 0.108108108, 0.060810811, 0.064, 0.098901099, 0.093333333, 0.139966273]
]
AR_DDIST_RECALL = [[0.036129032, 0.058823529, 0.083870968, 0.088, 0.045614035, 0.136708861, 0.124271845, 0.18238342, 0.297749196, 0.438018433, 0.600240964, 0.347207637, 0.413922798, 0.252272727, 0.252459016, 0.227047619, 0.16728972, 0.179136691, 0.177060932, 0.18, 0.183471074, 0.14112478], [0.019354839, 0.058823529, 0.0, 0.04, 0.087719298, 0.113924051, 0.097087379, 0.176165803, 0.254019293, 0.383640553, 0.769363167, 0.117541766, 0.355658199, 0.322860963, 0.155737705, 0.104761905, 0.072429907, 0.064748201, 0.075268817, 0.0625, 0.049586777, 0.05887522], [0.025806452, 0.176470588, 0.129032258, 0.1, 0.105263158, 0.113924051, 0.087378641, 0.14507772, 0.282958199, 0.456221198, 0.832702238, 0.696062053, 0.516991092, 0.169117647, 0.158079625, 0.139047619, 0.093457944, 0.104316547, 0.114695341, 0.1375, 0.148760331, 0.101933216]]
AR_DDIST_PRECISION = [[0.009534216, 0.056003002, 0.050098183, 0.079877961, 0.038104716, 0.090167565, 0.062775656, 0.081815383, 0.093758421, 0.159526505, 0.496206223, 0.775621567, 0.418083563, 0.231349445, 0.230572843, 0.195378622, 0.171265485, 0.171858272, 0.221088814, 0.163042086, 0.155251586, 0.129378617], [0.002031144, 0.013513514, 0.0, 0.010638298, 0.020661157, 0.027027027, 0.025062657, 0.048850575, 0.071171171, 0.155317164, 0.545521113, 0.686889819, 0.424576605, 0.295051924, 0.182943604, 0.120087336, 0.107266436, 0.08411215, 0.116666667, 0.068965517, 0.047244094, 0.043648208], [0.007707129, 0.130434783, 0.097560976, 0.080645161, 0.081081081, 0.104651163, 0.075, 0.125, 0.170542636, 0.302752294, 0.720262022, 0.795879383, 0.463335305, 0.315461347, 0.302013423, 0.231012658, 0.19047619, 0.171597633, 0.205128205, 0.150684932, 0.155172414, 0.072727273]]
ID_DDIST_RECALL = [[0.263333333, 0.522222222, 0.411764706, 0.2, 0.315151515, 0.493548387, 0.402272727, 0.467213115, 0.556734694, 0.687761194, 0.744821732, 0.322324592, 0.508360129, 0.386455331, 0.396419437, 0.398198198, 0.386046512, 0.413138686, 0.38, 0.426190476, 0.269565217, 0.302597403], [0.25, 0.333333333, 0.117647059, 0.147058824, 0.090909091, 0.241935484, 0.318181818, 0.385245902, 0.404081633, 0.589552239, 0.889643463, 0.265768958, 0.42926045, 0.345821326, 0.31713555, 0.315315315, 0.296511628, 0.284671533, 0.1875, 0.214285714, 0.239130435, 0.233766234], [0.316666667, 0.388888889, 0.117647059, 0.323529412, 0.212121212, 0.387096774, 0.443181818, 0.475409836, 0.555102041, 0.650746269, 0.89770798, 0.812544295, 0.532958199, 0.351585014, 0.273657289, 0.243243243, 0.23255814, 0.284671533, 0.1875, 0.166666667, 0.043478261, 0.159090909]]
ID_DDIST_PRECISION = [[0.182281479, 0.516111111, 0.425, 0.363013784, 0.314351852, 0.484560097, 0.351385747, 0.271934882, 0.299533649, 0.387284724, 0.549559728, 0.834015103, 0.553215133, 0.375547899, 0.358161231, 0.301849397, 0.36131359, 0.403968216, 0.32104923, 0.413260003, 0.2596874, 0.323323448], [0.056818182, 0.162162162, 0.051282051, 0.070422535, 0.040540541, 0.159574468, 0.210526316, 0.229268293, 0.305555556, 0.478787879, 0.668580542, 0.845546787, 0.538306452, 0.394736842, 0.302439024, 0.239726027, 0.245192308, 0.210810811, 0.107142857, 0.140625, 0.100917431, 0.096644295], [0.073076923, 0.21875, 0.043478261, 0.189655172, 0.088607595, 0.289156627, 0.327731092, 0.329545455, 0.438709677, 0.532356532, 0.873605948, 0.850519288, 0.570567986, 0.531590414, 0.488584475, 0.325301205, 0.285714286, 0.386138614, 0.172413793, 0.184210526, 0.066666667, 0.133879781]]

#
def draw_curve(scores, names, maxn=10):
    plt.figure(figsize=(12, 6))
    ax1 = plt.subplot()
    ax1.grid(linestyle='--')
    ax1.set_xticks(list(range(2*maxn+2)))
    ax1.set_xticklabels([f"<-{maxn}"]+[str(z) for z in range(-maxn,maxn+1) if z!=0]+[f">{maxn}"], fontsize=18)
    #
    for arr, name in zip(scores, names):
        ax1.plot(arr, linewidth=3.0, linestyle='-', label=name)
    ax1.set_ylabel("UAS", fontsize=22)
    ax1.set_xlabel("Dependency Distance", fontsize=22)
    ax1.legend(loc='upper right')
    plt.tight_layout()
    plt.show()

#
SHOW_LABELS = ["case", "nmod", "obj", "nsubj"]
JA_LABELS = ["case (21.8%)", "nmod (5.9%)", "obj (2.6%)", "nsubj (3.9%)"]
AR_LABELS = ["case (15.3%)", "nmod (22.1%)", "obj (3.6%)", "nsubj (6.7%)"]
ID_LABELS = ["case (9.7%)", "nmod (3.5%)", "obj (4.9%)", "nsubj (8.1%)"]
JA_RESULTS = [[0.203201164, 0.04602961, 0.160843373, 0.193469388], [0.088032012, 0.067294751, 0.126506024, 0.193877551], [0.703528556, 0.076716016, 0.719879518, 0.495918367]]
AR_RESULTS = [[0.222425392, 0.549739519, 0.409745042, 0.426552463], [0.149905123, 0.791614984, 0.360339943, 0.294432548], [0.581335173, 0.830066981, 0.596600567, 0.574946467]]
ID_RESULTS = [[0.586737401, 0.677529286, 0.566312057, 0.211881188], [0.827586207, 0.552715655, 0.604609929, 0.29950495], [0.819628647, 0.686900958, 0.861702128, 0.336633663]]

#
def draw_bar(scores, names, labels, title, m=100, legend=True):
    COLORS = ["red", "blue", "green"]
    HATCHES = ["-", "\\", ""]
    plt.rcParams['ytick.labelsize'] = 28
    #
    plt.figure(figsize=(12, 6))
    ax1 = plt.subplot()
    ax1.grid(linestyle='--', axis='y')
    #
    x = range(len(labels))
    plt.xticks([index + 0.2 for index in x], labels, fontsize=30)
    #
    ii=0
    for arr, name in zip(scores, names):
        rect = plt.bar(left=[i+0.3*ii for i in x], height=np.array(arr)*m, width=0.3, alpha=0.9, label=name, color=COLORS[ii], hatch=HATCHES[ii])
        ii+=1
    #
    ax1.set_ylabel("Recall (UAS%)", fontsize=32)
    #ax1.set_xlabel("Dependency Label", fontsize=28)
    # ax1.legend(loc='upper right')
    if legend:
        ax1.legend(bbox_to_anchor=(-0.075, -0.3, 0.75, -0.3), loc=3, ncol=3, mode=None, borderaxespad=0., fontsize=30)
    plt.title(title, loc='left', fontsize=32)
    plt.tight_layout(rect=(0,0.1,1,1))
    plt.show()

def main():
    #
    # for values in [AR_DDIST_RECALL, AR_DDIST_PRECISION, ID_DDIST_RECALL, ID_DDIST_PRECISION, JA_DDIST_RECALL, JA_DDIST_PRECISION]:
    #     draw_curve(values, SYSTEM_NAMES)
    for values, labels, title in zip([AR_RESULTS, ID_RESULTS, JA_RESULTS], [AR_LABELS, ID_LABELS, JA_LABELS],
                                     ["Arabic", "Indonesian", "Japanese"]):
        draw_bar(values, SYSTEM_NAMES, labels, title, legend=(title=="Indonesian"))

if __name__ == '__main__':
    main()
